---
apiVersion: charts.kubealex.com/v1
kind: K8SMediaserver
metadata:
  name: mediaserver
spec:
  # Default values copied from <project_dir>/helm-charts/k8s-mediaserver/values.yaml
  general:
    ingress_host: mediaserver.nagtzaam.org
    plex_ingress_host: plex.nagtzaam.org
    image_tag: latest
    podDistribution: cluster # can be "spread" or "cluster"
    #UID to run the process with
    puid: 1000
    #GID to run the process with
    pgid: 1000
    #Persistent storage selections and pathing
    storage:
      customVolume:  #settrue to true if not using a PVC (must provide volume below)
      accessMode: ""
      pvcName: mediaserver-pvc
      size: 5Gi
      pvcStorageClass: ""
      # the path starting from the top level of the pv you're passing. If your share is server.local/share/, then tv is server.local/share/media/tv
      subPaths:
        tv: media/tv
        movies: media/movies
        downloads: downloads
        transmission: transmission
        sabnzbd: sabnzbd
        config: config
      volumes:
      nfs:
        server: 192.168.1.195
        path: /mnt/sda/data/mediaserver/
    ingress:
      ingressClassName: ""
    nodeSelector: {}

  sonarr:
    enabled: true
    container:
      image: docker.io/linuxserver/sonarr
      nodeSelector: {}
      port: 8989
    service:
      type: ClusterIP
      port: 8989
      nodePort:
      extraLBService: true
      extraLBAnnotations: {}
      # Defines an additional LB service, requires cloud provider service or MetalLB
    ingress:
      enabled: false
      annotations: {}
      path: /sonarr
      tls:
        enabled: false
        secretName: ""
    resources: {}
    volume:
      {}
      #name: pvc-sonarr-config
      #storageClassName: longhorn
      #annotations:
      #  my-annotation/test: my-value
      #labels:
      #  my-label/test: my-other-value
      #accessModes: ReadWriteOnce
      #storage: 5Gi
      #selector: {}

  radarr:
    enabled: true
    container:
      image: docker.io/linuxserver/radarr
      nodeSelector: {}
      port: 7878
    service:
      type: ClusterIP
      port: 7878
      nodePort:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: true
      extraLBAnnotations: {}
    ingress:
      enabled: false
      annotations: {}
      path: /radarr
      tls:
        enabled: false
        secretName: ""
    resources: {}
    volume:
      {}
      #name: pvc-radarr-config
      #storageClassName: longhorn
      #annotations: {}
      #labels: {}
      #accessModes: ReadWriteOnce
      #storage: 5Gi
      #selector: {}

  jackett:
    enabled: true
    container:
      image: docker.io/linuxserver/jackett
      nodeSelector: {}
      port: 9117
    service:
      type: ClusterIP
      port: 9117
      nodePort:
      extraLBService: true
      extraLBAnnotations: {}
      # Defines an additional LB service, requires cloud provider service or MetalLB
    ingress:
      enabled: false
      annotations: {}
      path: /jackett
      tls:
        enabled: false
        secretName: ""
    resources: {}
    volume: {}
    #  name: pvc-jackett-config
    #  storageClassName: longhorn
    #  annotations: {}
    #  labels: {}
    #  accessModes: ReadWriteOnce
    #  storage: 5Gi
    #  selector: {}

  transmission:
    enabled: true
    container:
      image: docker.io/linuxserver/transmission
      nodeSelector: {}
      port:
        utp: 9091
        peer: 51413
    service:
      utp:
        type: ClusterIP
        port: 9091
        # if type is NodePort, nodePort must be set
        nodePort:
        # Defines an additional LB service, requires cloud provider service or MetalLB
        extraLBService: true
        extraLBAnnotations: {}
      peer:
        type: ClusterIP
        port: 51413
        # if type is NodePort, nodePort and nodePortUDP must be set
        nodePort:
        nodePortUDP:
        # Defines an additional LB service, requires cloud provider service or MetalLB
        extraLBService: true
        extraLBAnnotations: {}
    ingress:
      enabled: false
      annotations: {}
      path: /transmission
      tls:
        enabled: false
        secretName: ""
    config:
      auth:
        enabled: false
        username: ""
        password: ""
    resources: {}
    volume: {}
    #  name: pvc-transmission-config
    #  storageClassName: longhorn
    #  annotations: {}
    #  labels: {}
    #  accessModes: ReadWriteOnce
    #  storage: 5Gi
    #  selector: {}

  sabnzbd:
    enabled: true
    container:
      image: docker.io/linuxserver/sabnzbd
      nodeSelector: {}
      port:
        http: 8080
        https: 9090
    service:
      http:
        type: ClusterIP
        port: 8080
        nodePort:
        # Defines an additional LB service, requires cloud provider service or MetalLB
        extraLBService: true
        extraLBAnnotations: {}
      https:
        type: ClusterIP
        port: 9090
        nodePort:
        # Defines an additional LB service, requires cloud provider service or MetalLB
        extraLBService: true
        extraLBAnnotations: {}
    ingress:
      enabled: false
      annotations: {}
      path: /sabnzbd
      tls:
        enabled: false
        secretName: ""
    resources: {}
    volume: {}
    #  name: pvc-plex-config
    #  storageClassName: longhorn
    #  annotations: {}
    #  labels: {}
    #  accessModes: ReadWriteOnce
    #  storage: 5Gi
    #  selector: {}

  prowlarr:
    enabled: true
    container:
      image: docker.io/linuxserver/prowlarr
      tag: develop
      nodeSelector: {}
      port: 9696
    service:
      type: ClusterIP
      port: 9696
      nodePort:
      extraLBService: true
      extraLBAnnotations: {}
    ingress:
      enabled: false
      annotations: {}
      path: /prowlarr
      tls:
        enabled: false
        secretName: ""
    resources: {}
    volume: {}
    #  name: pvc-prowlarr-config
    #  storageClassName: longhorn
    #  annotations: {}
    #  labels: {}
    #  accessModes: ReadWriteOnce
    #  storage: 5Gi
    #  selector: {}

  plex:
    enabled: true
    claim: "CHANGEME"
    replicaCount: 1
    container:
      image: docker.io/linuxserver/plex
      nodeSelector: {}
      port: 32400
    service:
      type: ClusterIP
      port: 32400
      nodePort:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: true
      extraLBAnnotations: {}
    ingress:
      enabled: false
      annotations: {}
      tls:
        enabled: false
        secretName: ""
    resources: {}
    #  limits:
    #    cpu: 100m
    #    memory: 100Mi
    #  requests:
    #    cpu: 100m
    #    memory: 100Mi
    volume: {}
    #  name: pvc-plex-config
    #  storageClassName: longhorn
    #  annotations: {}
    #  labels: {}
    #  accessModes: ReadWriteOnce
    #  storage: 5Gi
    #  selector: {}

  jellyfin:
    enabled: false
    replicaCount: 1
    container:
      image: docker.io/linuxserver/jellyfin
      nodeSelector: {}
      port: 8096
    service:
      type: ClusterIP
      port: 8096
      nodePort:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: true
      extraLBAnnotations: {}
    ingress:
      enabled: true
      annotations: {}
      tls:
        enabled: false
        secretName: ""
    resources: {}
    #  limits:
    #    cpu: 100m
    #    memory: 100Mi
    #  requests:
    #    cpu: 100m
    #    memory: 100Mi
    volume: {}
    #  name: pvc-plex-config
    #  storageClassName: longhorn
    #  annotations: {}
    #  labels: {}
    #  accessModes: ReadWriteOnce
    #  storage: 5Gi
    #  selector: {}
